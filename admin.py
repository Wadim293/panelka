from aiogram import Router, F, types
from aiogram.filters import Command
from models import Application, MainUser
from main_menu import send_main_menu
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

async def get_status_markup(status: str, app_id: int) -> InlineKeyboardMarkup:
    if status == "accepted":
        btn = InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–∞", callback_data="none")
    elif status == "rejected":
        btn = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", callback_data="none")
    else:
        btn = InlineKeyboardButton(text="‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", callback_data="none")
    return InlineKeyboardMarkup(inline_keyboard=[[btn]])

@router.callback_query(F.data.startswith("accept_app:"))
async def accept_application(callback: types.CallbackQuery):
    app_id = int(callback.data.split(":")[1])
    app = await Application.get_or_none(id=app_id)
    if not app:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if app.status != "pending":
        await callback.answer(f"‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({app.status}).", show_alert=True)
        return

    app.status = "accepted"
    await app.save()

    user = await MainUser.get_or_none(telegram_id=app.telegram_id)
    if user:
        user.is_accepted = True
        await user.save()

    try:
        await callback.bot.send_message(
            chat_id=app.telegram_id,
            text="‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! /start.</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.", show_alert=True)
    markup = await get_status_markup("accepted", app_id)
    # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ç–µ–∫—Å—Ç
    await callback.message.edit_reply_markup(reply_markup=markup)

@router.callback_query(F.data.startswith("reject_app:"))
async def reject_application(callback: types.CallbackQuery):
    app_id = int(callback.data.split(":")[1])
    app = await Application.get_or_none(id=app_id)
    if not app:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if app.status != "pending":
        await callback.answer(f"‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({app.status}).", show_alert=True)
        return

    app.status = "rejected"
    await app.save()

    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", show_alert=True)
    markup = await get_status_markup("rejected", app_id)
    await callback.message.edit_reply_markup(reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/XBeba")]  # –í–∞—à–∞ —Å—Å—ã–ª–∫–∞
        ])
        await callback.bot.send_message(
            chat_id=app.telegram_id,
            text="‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

@router.message(Command(commands=["admin"]))
async def admin_start(message: types.Message):
    await message.answer("<b>üõ† –ê–¥–º–∏–Ω–∫–∞. –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:</b>", parse_mode="HTML")
    apps = await Application.order_by("created_at")
    if not apps:
        await message.answer("<b>–ù–µ—Ç –∑–∞—è–≤–æ–∫.</b>", parse_mode="HTML")
        return

    for app in apps:
        text = (
            f"üì• <b>–ó–∞—è–≤–∫–∞ #{app.id}</b>\n\n"
            f"üë§ <b>ID:</b> <code>{app.telegram_id}</code>\n"
            f"üë§ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> <b>@{app.username or '–Ω–µ—Ç'}</b>\n"
            f"üë§ <b>–ò–º—è:</b> <b>{app.first_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>\n"
            f"‚ú® <b>LZT:</b> <b>{app.lzt}</b>\n"
            f"‚ö° <b>–û–ø—ã—Ç:</b> <b>{app.experience}</b>\n"
            f"üåç <b>–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª:</b> <b>{app.source}</b>\n\n"
            f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> <b>{app.status.capitalize()}</b>"
        )

        if app.status == "pending":
            markup = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_app:{app.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_app:{app.id}")
            ]])
        else:
            markup = await get_status_markup(app.status, app.id)

        await message.answer(text, reply_markup=markup, parse_mode="HTML")